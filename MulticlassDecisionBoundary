{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/martinpius/PYTORCH/blob/main/MulticlassDecisionBoundary\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive/\", force_remount = True)\n",
        "try:\n",
        "  COLAB = True\n",
        "  import torch, time\n",
        "  from torch import nn, optim\n",
        "  from torch.nn import CrossEntropyLoss\n",
        "  import numpy as np\n",
        "  import matplotlib.pyplot as plt\n",
        "  from torch.utils.data import Dataset, DataLoader\n",
        "  from tqdm import tqdm\n",
        "  from sklearn.datasets import make_blobs\n",
        "  from sklearn.model_selection import train_test_split\n",
        "\n",
        "  print(f\">>>> You are on Google CoLaB with torch version {torch.__version__}\")\n",
        "\n",
        "except Exception as e:\n",
        "  COLAB = False\n",
        "  print(f\">>>> {type(e)}: {e}\\n>>>> please correct {type(e)} and reload your device\")\n",
        "\n",
        "def __tmfmt__(t: float = 125.827)->float:\n",
        "  h = int(t / (60 * 60))\n",
        "  m = int(t % (60 * 60) /60)\n",
        "  s = int(t % 60)\n",
        "  return f\"hrs: {h} mins: {m:>02} secs: {s:>05.2f}\"\n",
        "device = torch.device(\"cuda\") if torch.cuda.is_available() else \"cpu\"\n",
        "print(f\"\\n>>>> Available device: {device}\")\n",
        "!nvidia-smi\n",
        "print(f\">>>> time elapsed:\\t{__tmfmt__()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XKIxr7eUfFc1",
        "outputId": "d9492c28-99c6-457f-eacf-8f95104d18e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n",
            ">>>> You are on Google CoLaB with torch version 1.12.1+cu113\n",
            "\n",
            ">>>> Available device: cpu\n",
            "NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.\n",
            "\n",
            ">>>> time elapsed:\thrs: 0 mins: 02 secs: 05.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Set the defaults hyper-parameters"
      ],
      "metadata": {
        "id": "pWudSEvkisOo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "EPOCHS = 100\n",
        "INPUT_DIMS = 2\n",
        "NUM_CLASSES = 10\n",
        "BATCH_SIZE = 256 if device == \"cuda\" else 32\n",
        "HIDDEN_DIM = 128\n"
      ],
      "metadata": {
        "id": "PFyqR_SPhjWU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the toy dataset from sklearn lib"
      ],
      "metadata": {
        "id": "aXybQ_n7jAis"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_bl, y_bl = make_blobs(n_samples = 10000, n_features = INPUT_DIMS,\n",
        "                        centers = NUM_CLASSES, cluster_std = 0.04,\n",
        "                        random_state = 123)"
      ],
      "metadata": {
        "id": "FhPTcAxkiJxZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# split the data intro train-test sets\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X_bl, y_bl, test_size = 0.2, shuffle = True)\n",
        "print(f\">>>> X_train shape: {X_train.shape}, Y_train shape: {Y_train.shape}\\\n",
        "\\n>>>> X_test shape: {X_test.shape}, Y_test shape: {Y_test.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W9mUTBn1iob3",
        "outputId": "419dc8da-02dd-42ee-aa31-4263e3576aed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> X_train shape: (8000, 2), Y_train shape: (8000,)\n",
            ">>>> X_test shape: (2000, 2), Y_test shape: (2000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build a customized Pytorch data iterator:\n",
        "class MyDataset(Dataset):\n",
        "  def __init__(self, X, Y):\n",
        "    super().__init__()\n",
        "    self.X = X\n",
        "    self.Y = Y\n",
        "\n",
        "  def __len__(self):\n",
        "    return len(self.Y)\n",
        "  \n",
        "  def __getitem__(self, idx):\n",
        "    X, Y = self.X[idx], self.Y[idx]\n",
        "    return X, Y\n",
        "\n",
        "train_data = MyDataset(torch.from_numpy(X_train).to(torch.float32), torch.from_numpy(Y_train).to(torch.long))\n",
        "test_data = MyDataset(torch.from_numpy(X_test).to(torch.float32), torch.from_numpy(Y_test).to(torch.long))\n",
        "\n",
        "train_loader = DataLoader(dataset = train_data, batch_size = BATCH_SIZE, shuffle = True)\n",
        "test_loader = DataLoader(dataset = test_data, batch_size = BATCH_SIZE, shuffle = False)\n",
        "\n",
        "x_train, y_train = next(iter(train_loader))\n",
        "x_test, y_test = next(iter(test_loader))\n",
        "print(f\">>>> x_train batch: {x_train.shape}, y_train batch: {y_train.shape}\\\n",
        "\\n>>>> x_test batch: {x_test.shape}, y_test batch: {y_test.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DKfgx1wKjyy3",
        "outputId": "af643906-dfa6-4646-e139-8ed4c79fbced"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> x_train batch: torch.Size([32, 2]), y_train batch: torch.Size([32])\n",
            ">>>> x_test batch: torch.Size([32, 2]), y_test batch: torch.Size([32])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build a multi-class classifier:\n",
        "class MultiClassifier(nn.Module):\n",
        "  def __init__(self, input_dim = INPUT_DIMS, \n",
        "               hidden_dim = HIDDEN_DIM,\n",
        "               num_classes = NUM_CLASSES):\n",
        "    super().__init__()\n",
        "    self.input_dim = input_dim\n",
        "    self.hidden_dim = hidden_dim\n",
        "    self.num_classes = num_classes\n",
        "    self.mlp = nn.Sequential(\n",
        "        nn.Linear(self.input_dim, self.hidden_dim),\n",
        "        nn.BatchNorm1d(num_features = self.hidden_dim),\n",
        "        nn.ReLU(),\n",
        "        nn.Linear(self.hidden_dim, self.hidden_dim),\n",
        "        nn.BatchNorm1d(num_features = self.hidden_dim),\n",
        "        nn.ReLU(),\n",
        "        nn.Linear(self.hidden_dim, self.num_classes))\n",
        "  \n",
        "  def forward(self, x: torch.Tensor)->torch.Tensor:\n",
        "    return self.mlp(x)\n",
        "\n",
        "# Instantiate the model class and obtain the predictions fro the untrained net\n",
        "input_tensor = torch.randn(size = (BATCH_SIZE, INPUT_DIMS)).to(device = device)\n",
        "model = MultiClassifier()\n",
        "assert model(input_tensor).shape == (BATCH_SIZE, NUM_CLASSES)"
      ],
      "metadata": {
        "id": "aIWt5ysElZJF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.eval()\n",
        "with torch.inference_mode():\n",
        "  preds = model(torch.from_numpy(X_test).float())"
      ],
      "metadata": {
        "id": "hXDsc1tbnRFA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute the accuracy of the model and plot the Decision Boundary:\n",
        "def __Accuracy__(y_true, y_preds):\n",
        "  # change the logits into prob-values and get the classes preds\n",
        "  y_preds = torch.softmax(y_preds, dim = 1).argmax(dim = 1) # This pick the most probable class: \n",
        "  y_preds = y_preds\n",
        "\n",
        "  acc = torch.eq(y_true, y_preds).sum().item()\n",
        "  return f\"{(acc/len(y_true)*100):.2f}\""
      ],
      "metadata": {
        "id": "CRWjm2j6nhZS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "acc = __Accuracy__(torch.from_numpy(Y_test).float(), preds)"
      ],
      "metadata": {
        "id": "mbvgpa9UonPR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "acc"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "EbYGVLpco2sc",
        "outputId": "da911893-7104-4855-c957-91bd4a97ad64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'21.45'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def __DecisionBoundary__(model: torch.nn.Module, \n",
        "                         X: torch.Tensor,\n",
        "                         y: torch.Tensor):\n",
        "  \"\"\"\n",
        "  This module plot the decision boundary learned by the model given a a dataset\n",
        "  \"\"\"\n",
        "  # save everything back to \"CPU\" for easy plotting\n",
        "  model, X, y = model.to(\"cpu\"), X.to(\"cpu\"), y.to(\"cpu\")\n",
        "\n",
        "  # Obtain the grids-boundaries using the features (only 2D):\n",
        "  xx_min, xx_max = X[:,0].min() - 0.1, X[:,0].max() + 0.1\n",
        "  xy_min, xy_max = X[:,1].min() - 0.1, X[:,1].max() + 0.1\n",
        "\n",
        "  xx, yy = np.meshgrid(np.linspace(xx_min, xx_max, 101), np.linspace(xy_min, xy_max, 101))\n",
        "\n",
        "  # create a torch tensor as input to the network\n",
        "  xx_data = torch.from_numpy(np.column_stack((xx.ravel(), yy.ravel()))).float()\n",
        "\n",
        "  # Get the predictions using xx_data\n",
        "  model.eval()\n",
        "  with torch.inference_mode():\n",
        "    preds = model(xx_data)\n",
        "\n",
        "  # Get the prob-values by adding a softmax layer to the logits\n",
        "  if len(y.unique()) > 2:\n",
        "    preds = torch.softmax(preds, dim =1).argmax(dim = 1) # for multi-class tasks\n",
        "\n",
        "  else:\n",
        "    preds = torch.round(torch.sigmoid(preds)) # for binary tasks\n",
        "  \n",
        "  # reshape the predictions to suit the grids-scale and transform back to numpy arrays\n",
        "  preds = preds.reshape(xx.shape).detach().numpy() \n",
        "  plt.figure(figsize = (15,15))\n",
        "  plt.contourf(xx, yy, preds, cmap = plt.cm.RdYlBu, alpha = 0.7)\n",
        "  plt.scatter(X[:, 0], X[:, 1], s = 40, c = y, cmap = plt.cm.RdYlBu)\n",
        "  plt.xlim(xx.min(), xx.max())\n",
        "  plt.ylim(yy.min(), yy.max())\n",
        "  plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "kNRH01YWpkNC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Pltting the decission boundary:\n",
        "__DecisionBoundary__(model, torch.from_numpy(X_test).float(), torch.from_numpy(Y_test).float())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 863
        },
        "id": "cYqYhWniuCmk",
        "outputId": "82968f6a-2c31-4c84-ce9b-77d02631a5ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x1080 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# We see the decission boundary is quite random...Since the model is not trained YET. ie accuracy was 0.2%\n"
      ],
      "metadata": {
        "id": "gzVS2Ig0uVjB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Now let train our model and observes the prediction accuracy and the decision boundary"
      ],
      "metadata": {
        "id": "N6gLrDmGvLgh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = CrossEntropyLoss()\n",
        "learning_rate = 1e-3"
      ],
      "metadata": {
        "id": "4DnbB6rrzvoh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib.scale import LogitTransform\n",
        "def train_test_loop(model, train_loader, test_loader, criterion, learning_rate, EPOCHS):\n",
        "\n",
        "  model.train()\n",
        "\n",
        "  optimizer = optim.Adam(params = model.parameters(), lr = learning_rate)\n",
        "\n",
        "\n",
        "  # training loop\n",
        "  for epoch in range(EPOCHS):\n",
        "    for batch, (data, labels) in enumerate(tqdm(train_loader)):\n",
        "      data = data.to(device)\n",
        "      labels = labels.to(device)\n",
        "      logits = model(data)\n",
        "      optimizer.zero_grad()\n",
        "      train_loss = criterion(logits, labels)\n",
        "      train_loss.backward()\n",
        "      optimizer.step()\n",
        "    \n",
        "    if epoch % 10:\n",
        "      print(f\">>>> end of training for epoch {epoch}\\\n",
        "      \\n>>>> train loss: {train_loss:.4f}| train accuracy: {__Accuracy__(labels,logits)}\")\n",
        "\n",
        "    # testing loop\n",
        "    model.eval()\n",
        "    with torch.inference_mode():\n",
        "      for batch, (data, labels) in enumerate(tqdm(test_loader)):\n",
        "        data, labels = data.to(device), labels.to(device)\n",
        "        logits = model(data)\n",
        "        test_loss = criterion(logits, labels)\n",
        "    \n",
        "    if epoch % 10 == 0:\n",
        "      print(f\"\\n>>>> end of testing for epoch {epoch}\\\n",
        "      \\n>>>> testing loss: {test_loss:.4f}| testing accuracy: {__Accuracy__(labels, logits)}\")\n",
        "\n",
        "\n",
        "\n",
        "      \n",
        "\n"
      ],
      "metadata": {
        "id": "PSTQ5DzDz6_u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Training the network by calling the above train-test loop fn\n",
        "tic = time.time()\n",
        "train_test_loop(model, train_loader, test_loader, criterion, learning_rate, EPOCHS)\n",
        "toc = time.time()\n",
        "print(f\"\\n>>>> time elapsed after running experiment for {EPOCHS} epochs: {__tmfmt__(toc - tic)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YDz3S9FL3uZ5",
        "outputId": "b2716f20-ad7e-43d6-efba-e073b46c5571"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 520.38it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 2044.37it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 0      \n",
            ">>>> testing loss: 0.0212| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 525.23it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 1      \n",
            ">>>> train loss: 0.0039| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1840.61it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 515.44it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 2      \n",
            ">>>> train loss: 0.0015| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1785.85it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 498.56it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 3      \n",
            ">>>> train loss: 0.0007| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1871.66it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 498.45it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 4      \n",
            ">>>> train loss: 0.0003| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1259.98it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 524.40it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 5      \n",
            ">>>> train loss: 0.0002| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1519.33it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 514.81it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 6      \n",
            ">>>> train loss: 0.0001| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1712.45it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 519.68it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 7      \n",
            ">>>> train loss: 0.0001| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2434.12it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 505.64it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 8      \n",
            ">>>> train loss: 0.0001| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1862.36it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 497.68it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 9      \n",
            ">>>> train loss: 0.0001| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2030.27it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 503.44it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 1559.28it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 10      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 514.12it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 11      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1845.30it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 502.57it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 12      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1790.64it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 506.36it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 13      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1576.72it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 510.15it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 14      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2029.97it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 487.25it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 15      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1840.68it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 509.25it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 16      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1928.01it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 503.70it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 17      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1951.07it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 500.64it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 18      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2006.52it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 529.82it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 19      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1415.78it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 501.95it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 1864.94it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 20      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 495.80it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 21      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1718.12it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 491.93it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 22      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2042.08it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 489.65it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 23      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1564.12it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 505.15it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 24      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1711.11it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 498.14it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 25      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1943.94it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 528.18it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 26      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1959.37it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 519.82it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 27      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2121.09it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 509.83it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 28      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1528.28it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 480.47it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 29      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1692.93it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 504.13it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 1816.14it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 30      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 483.67it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 31      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1952.02it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 508.11it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 32      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1949.00it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 478.47it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 33      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1918.75it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 503.53it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 34      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1631.09it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 534.65it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 35      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1457.86it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 516.16it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 36      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1912.62it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 529.74it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 37      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1953.26it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 518.97it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 38      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1585.66it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 538.39it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 39      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2189.71it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 517.25it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 2056.10it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 40      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 519.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 41      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1545.81it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 492.23it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 42      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1708.18it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 508.35it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 43      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1967.10it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 507.29it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 44      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1952.02it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 534.42it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 45      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1739.63it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 499.27it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 46      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1675.76it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 500.62it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 47      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1276.93it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 526.49it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 48      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1695.97it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 499.07it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 49      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1426.91it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 493.91it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 1862.31it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 50      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 499.49it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 51      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2342.31it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 509.43it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 52      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1535.67it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 477.03it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 53      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2228.92it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 509.39it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 54      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1547.55it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 522.60it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 55      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2166.53it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 525.34it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 56      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1789.79it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 514.84it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 57      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1635.09it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 498.51it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 58      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1744.07it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 497.18it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 59      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1853.28it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 478.99it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 2086.24it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 60      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 503.63it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 61      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1927.94it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 487.53it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 62      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1909.88it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 522.25it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 63      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1785.05it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 476.23it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 64      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2430.61it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 518.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 65      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2233.33it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 506.76it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 66      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1887.23it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 512.72it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 67      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1685.00it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 508.15it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 68      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1926.15it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 506.35it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 69      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2159.63it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 514.68it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 1641.24it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 70      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 498.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 71      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1737.35it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 506.11it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 72      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1863.03it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 487.19it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 73      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1683.13it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 493.20it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 74      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1809.65it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 474.25it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 75      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2244.66it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 507.57it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 76      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1769.74it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 511.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 77      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1783.23it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 507.42it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 78      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1895.45it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 508.27it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 79      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1694.91it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 512.24it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 1669.55it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 80      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 492.74it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 81      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1745.00it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 501.35it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 82      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1469.89it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 495.16it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 83      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1813.75it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 517.30it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 84      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1178.29it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 481.96it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 85      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1673.12it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 502.58it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 86      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1818.14it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 506.13it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 87      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1658.86it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 498.39it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 88      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1813.15it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 457.81it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 89      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2191.00it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 472.39it/s]\n",
            "100%|██████████| 63/63 [00:00<00:00, 1498.51it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> end of testing for epoch 90      \n",
            ">>>> testing loss: 0.0000| testing accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 250/250 [00:00<00:00, 472.29it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 91      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1977.23it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 470.63it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 92      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1402.99it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 490.91it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 93      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1813.85it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 458.06it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 94      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 2049.80it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 250.96it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 95      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 925.47it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 454.46it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 96      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1670.66it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 454.85it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 97      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1947.73it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 439.14it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 98      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1405.75it/s]\n",
            "100%|██████████| 250/250 [00:00<00:00, 461.61it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> end of training for epoch 99      \n",
            ">>>> train loss: 0.0000| train accuracy: 100.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 63/63 [00:00<00:00, 1820.53it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            ">>>> time elapsed after running experiment for 100 epochs: hrs: 0 mins: 00 secs: 56.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the predictions from the entire test set again and compute the accuracy and obtaining the decission boundary \n",
        "model.eval()\n",
        "with torch.inference_mode():\n",
        "  predictions = model(torch.from_numpy(X_test).float())"
      ],
      "metadata": {
        "id": "aojHRRoL4YtV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = __Accuracy__(torch.from_numpy(Y_test).float(), predictions)"
      ],
      "metadata": {
        "id": "PqaExnlo_1V9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "XLnf4F30AA4X",
        "outputId": "35ab56d1-37eb-4ffa-f2db-afddf0ff4c88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'100.00'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "__DecisionBoundary__(model, torch.from_numpy(X_test).float(), torch.from_numpy(Y_test).float())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 863
        },
        "id": "iTq9RuW3ACzJ",
        "outputId": "fdfde1b1-d34c-409a-90b2-3516943a9f7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x1080 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The figure above displays a clear decision boundary for a 10 classes \n",
        "# We can also Print the first few examples for the labels and predictions if they are the same  \n",
        "print(f\">>>> First 30 true labels: {Y_test[:30]}\\n>>>> First 30 predictions: {torch.softmax(predictions, dim = 1).argmax(dim = 1)[:30]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WdrBofqNAUg2",
        "outputId": "d7a4a2b2-4ed6-4048-9410-412d57fd5db2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ">>>> First 30 true labels: [6 8 2 5 6 8 3 6 6 0 6 0 0 3 4 9 1 8 5 1 8 5 5 6 3 7 2 2 4 4]\n",
            ">>>> First 30 predictions: tensor([6, 8, 2, 5, 6, 8, 3, 6, 6, 0, 6, 0, 0, 3, 4, 9, 1, 8, 5, 1, 8, 5, 5, 6,\n",
            "        3, 7, 2, 2, 4, 4])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gYsDlWP2IslR"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPwEa6FA2ccu0ouqnGFwk3A",
      "include_colab_link": true
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}